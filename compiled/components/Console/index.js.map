{"version":3,"sources":["../../../src/components/Console/index.js"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import React from 'react'\nimport functional from 'react-functional'\nimport * as style from '../../style'\n\n/* eslint-disable react/no-unknown-property */\n\nconst Console = ({top, left, width, height, focused, independent, tooltips, output, actions}, cmp) => {\n  return (\n    <box\n      label='Console'\n      class={[style.panel, focused && style.selected]}\n      top={top}\n      left={left}\n      width={width}\n      height={height}\n      hoverText={actions && tooltips && 'ctrl+k'}\n    >\n      <textarea\n        ref={el => {\n          cmp.el = el\n          // hack :(\n          if (el && independent && focused) cmp.el.focus()\n        }}\n        mouse\n        inputOnFocus\n        focused={focused}\n        value={\n          !(cmp && cmp.force)\n            ? (output.all + '> ' + (\n              output.historyIndex\n                ? output.history.slice(output.historyIndex).shift()\n                : ''\n            ))\n            : cmp.force()\n        }\n        onFocus={() => (independent || focused || actions.focusPanel('console'))}\n        onBlur={() => {\n          // blessed doesn't unfocus the textarea\n          // when mouse is used - work around:\n          const textarea = cmp.el.parent.children[1]\n          const screen = cmp.el.screen\n          textarea._reading = false\n          screen.grabKeys = false\n          screen.program.hideCursor()\n          textarea.removeListener('keypress')\n        }}\n        onKeyUp={() => {\n          actions.consoleHistory({step: -1})\n        }}\n        onKeyDown={() => {\n          actions.consoleHistory({step: 1})\n        }}\n        onKeyBackspace={(ch, key) => {\n          if (cmp.el.value.substr(-2) === '\\n>') {\n            const val = cmp.el.value\n            cmp.force = () => { cmp.force = null; return val + ' ' }\n            cmp.forceUpdate()\n          }\n        }}\n        onKeypress={(ch, key) => {\n          if (key.name === 'return' && !key.shift) {\n            const lines = cmp.el.getLines()\n            const cmd = (lines[lines.length - 2] + '').substr(2)\n            actions.consoleInput(cmd)\n            return\n          }\n\n          if (key.name === 'tab') {\n            cmp.el._done()\n            actions.focusPanel(key.shift ? 'scope' : 'navigator')\n\n            if (independent) {\n              actions.focusTab('sources')\n              actions.focusPanel('console')\n              return\n            }\n          }\n\n          if (independent) {\n            if (key.name === 'escape') {\n              // hack :( - avoids intermittent crashing\n              setTimeout(() => {\n                actions.focusTab('sources')\n                actions.focusPanel('console')\n              })\n            }\n            return\n          }\n        }}\n      />\n      {independent && (\n        <box\n          width={15}\n          right={0}\n          bottom={0}\n          height={1}\n        >\n          Exit: ESC, TAB\n        </box>\n      )}\n\n    </box>\n  )\n}\n\nexport default functional(Console)\n"]}