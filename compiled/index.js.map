{"version":3,"sources":["../src/index.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,MAAM,eAAN,GAAwB,QAAxB;;;AAmBA,IAAM,eAAe,eAAK,IAAL,CAAU,SAAV,EAAqB,QAArB,EAA+B,oBAA/B,CAAf;;AAEN,IAAM,aAAa,EAAC,UAAU,IAAV,EAAgB,QAAQ,QAAR,EAA9B;;AAEN,IAAM,UAAU,YAAC,CAAG,UAAH,CAAc,YAAd,CAAD,gBACR,YAAe,QAAQ,YAAR,EADP,gBAER,WAFQ;;AAIhB,QAAQ,MAAR,GAAiB,iBAAO,OAAP,CAAe,QAAQ,MAAR,CAAhC;;AAEA,IAAM,QAAQ;AACZ,OAAK,SAAL;AACA,SAAO,QAAP;GACG,QAHS,CAAR;;IAMC,WAAY,MAAZ;;;sDAEQ,iBAAO,GAAP;yBAAa;QAAM,iCAAO;yBAAa;QAAM,iCAAO;QAS7D,QAKA;;;;;AAbJ,gBAAI,GAAJ,EAAS;AACP,kBAAI;AACF,wBAAQ,IAAR,CAAa,GAAb,EAAkB,SAAlB,EADE;eAAJ,CAEE,OAAO,CAAP,EAAU;AACV,wBAAQ,GAAR,CAAY,wCAAZ,EAAsD,GAAtD,EADU;eAAV;aAHJ;;AAQI,qBAAS,sBAAa,KAAb;;;AAEb,qBAAS,4BAAc,4BAA4B,IAA5B,CAAvB;AACA,qBAAS,6BAAe,EAAC,UAAD,EAAO,UAAP,EAAf,CAAT;;AAEI,uBAAW,yBAA0B;kBAAxB,sBAAwB;kBAAhB,gBAAgB;kBAAX,oBAAW;;AACvC,qBACE;;;gBAKG,OAAO,IAAP,KAAgB,QAAhB,IAA4B,qDAA5B;gBACA,OAAO,IAAP,KAAgB,SAAhB,IAA6B,qDAA7B;gBACA,QAAQ,SAAR,IAAqB,wDAArB;gBACA,QAAQ,SAAR,IAAqB,wDAArB;gBACD,4DAAS,OAAO,GAAP,IAAY,QAAQ,UAAU,UAAV,GAA7B,CATF;gBAUG,UAAU,UAAV,IAAwB,sDAAU,SAAS,UAAU,UAAV,EAAnB,CAAxB;gBACD,oDAAc,OAAO,QAAP,CAXhB;eADF,CADuC;aAA1B;;AAkBf,uBAAW,yBAAQ;kBAAE;kBAAQ;kBAAK;qBAAY,EAAC,cAAD,EAAS,QAAT,EAAc,YAAd;aAA3B,CAAR,CAA0D,QAA1D,CAAX;;6CAEO,0BAAO;;gBAAU,OAAO,KAAP,EAAV;cAAwB,8BAAC,QAAD,OAAxB;aAAP,EAAuD,MAAvD;;;;;;;;GAlCM","file":"index.js","sourcesContent":["Error.stackTraceLimit = Infinity\nimport 'babel-polyfill'\nimport 'source-map-support/register'\nimport fs from 'fs'\nimport path from 'path'\nimport React from 'react'\nimport {Provider, connect} from 'react-redux'\nimport {render} from 'react-blessed'\nimport createStore from './store/create'\nimport createScreen from './screen'\nimport config from './config'\nimport {\n  Console, Sources, Controls, Cog, Settings, Tabs\n} from './containers'\nimport {\n  startDebugging,\n  receiveSource\n} from './actions'\n\nconst userSettings = path.join(__dirname, 'config', 'user-settings.json')\n\nconst defaultCfg = {tooltips: true, layout: 'normal'}\n\nconst userCfg = (fs.existsSync(userSettings))\n  ? {...defaultCfg, ...require(userSettings)}\n  : {...defaultCfg}\n\nuserCfg.layout = config.layouts[userCfg.layout]\n\nconst store = createStore({\n  tab: 'sources',\n  panel: 'editor',\n  ...userCfg\n})\n\nconst {dispatch} = store\n\nexport default async (pid, {host: host = '127.0.0.1', port: port = 5858}) => {\n  if (pid) {\n    try {\n      process.kill(pid, 'SIGUSR1')\n    } catch (e) {\n      console.log('Warning unable to locate supplied pid ', pid)\n    }\n  }\n\n  let screen = createScreen(store)\n\n  dispatch(receiveSource('Waiting for debug port ' + port))\n  dispatch(startDebugging({host, port}))\n\n  let Devtools = ({layout, tab, panel}) => {\n    return (\n      <element>\n        {\n          // force tab rendering after layout change:\n          // todo: find a more elegant fix\n        }\n        {layout.name === 'normal' && <Tabs/>}\n        {layout.name === 'minimal' && <Tabs/>}\n        {tab === 'sources' && <Sources/>}\n        {tab === 'console' && <Console/>}\n        <Cog {...layout.cog} active={panel === 'settings'}/>\n        {panel === 'settings' && <Settings focused={panel === 'settings'}/>}\n        <Controls {...layout.controls}/>\n      </element>\n    )\n  }\n\n  Devtools = connect(({layout, tab, panel}) => ({layout, tab, panel}))(Devtools)\n\n  return render(<Provider store={store}><Devtools/></Provider>, screen)\n}\n"]}